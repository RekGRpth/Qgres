\unset ECHO
1..227
ok 1 - Function queue_entry(bytea, jsonb, text) should be IMMUTABLE
ok 2 - Function queue_entry(bytea, jsonb, text) should not be strict
ok 3 - Function queue_entry(bytea, jsonb, text) shouldn't be security definer
ok 4 - Function queue_entry(bytea, jsonb, text) shouldn't have any permissions defined
ok 5 - sanity check queue_entry() with named parameters
ok 6 - sanity check queue_entry() with no parameters
ok 7 - Function _queue_type__sanitize(text) should be STABLE
ok 8 - Function _queue_type__sanitize(text) should be strict
ok 9 - Function _queue_type__sanitize(text) shouldn't be security definer
ok 10 - Function _queue_type__sanitize(text) shouldn't have any permissions defined
ok 11 - Check _queue_type__sanitize('SP')
ok 12 - Check _queue_type__sanitize('Serial Publisher')
ok 13 - Check _queue_type__sanitize('SR')
ok 14 - Check _queue_type__sanitize('Serial Remover')
ok 15 - Check _queue_type__sanitize('sp')
ok 16 - Check _queue_type__sanitize('serial publisher')
ok 17 - Check _queue_type__sanitize('sr')
ok 18 - Check _queue_type__sanitize('serial remover')
ok 19 - Column _queue(queue_id) should be a primary key
ok 20 - Column _queue(queue_name) should have a unique constraint
ok 21 - Column _queue.queue_name should be NOT NULL
ok 22 - Column _queue.queue_name should be type citext
ok 23 - Trigger _queue_dml should call _queue_dml()
ok 24 - Trigger update should call _tg_not_allowed()
ok 25 - table "_queue" should not have any permissions defined
ok 26 - Column _sp_next_sequence_number(queue_id) should be a primary key
ok 27 - Column _sp_next_sequence_number.next_sequence_number should be NOT NULL
ok 28 - _sp_next_sequence_number(queue_id) should reference _queue(queue_id)
ok 29 - Trigger verify_sp_queue__insert should call _tg_sp_next_sequence_number__verify_sp_queue()
ok 30 - Trigger update_queue_id should call _tg_not_allowed()
ok 31 - table "_sp_next_sequence_number" should not have any permissions defined
ok 32 - Columns _sp_consumer(queue_id, consumer_name) should be a primary key
ok 33 - _sp_consumer(queue_id) should reference _sp_next_sequence_number(queue_id)
ok 34 - Trigger update should call _tg_not_allowed()
ok 35 - table "_sp_consumer" should not have any permissions defined
ok 36 - Columns _sp_entry(queue_id, sequence_number) should be a primary key
ok 37 - _sp_entry(queue_id) should reference _sp_next_sequence_number(queue_id)
ok 38 - Trigger insert should call _tg_sp_entry__sequence_number()
ok 39 - Trigger update should call _tg_not_allowed()
ok 40 - table "_sp_entry" should not have any permissions defined
ok 41 - Function _sp_trim(integer) should be VOLATILE
ok 42 - Function _sp_trim(integer) should not be strict
ok 43 - Function _sp_trim(integer) shouldn't be security definer
ok 44 - Check EXECUTE rights on function _sp_trim(integer)
ok 45 - Function queue__create(citext, queue_type) should be VOLATILE
ok 46 - Function queue__create(citext, queue_type) should not be strict
ok 47 - Function queue__create(citext, queue_type) should be security definer
ok 48 - Check EXECUTE rights on function queue__create(citext, queue_type)
ok 49 - Function queue__create(citext, text) should be VOLATILE
ok 50 - Function queue__create(citext, text) should not be strict
ok 51 - Function queue__create(citext, text) shouldn't be security definer
ok 52 - Function queue__create(citext, text) shouldn't have any permissions defined
ok 53 - Creation of SP queue works
ok 54 - Creation of SR queue works
ok 55 - Duplicate creation produces nice error message
ok 56 - Verify contents of view "queue"
ok 57 - Role public should be granted SELECT on table queue
ok 58 - Expected number of base queue entries
ok 59 - Function queue__get(citext) should be STABLE
ok 60 - Function queue__get(citext) should not be strict
ok 61 - Function queue__get(citext) shouldn't be security definer
ok 62 - Function queue__get(citext) shouldn't have any permissions defined
ok 63 - Function queue__get(integer) should be STABLE
ok 64 - Function queue__get(integer) should not be strict
ok 65 - Function queue__get(integer) shouldn't be security definer
ok 66 - Function queue__get(integer) shouldn't have any permissions defined
ok 67 - Function queue__get_id(citext) should be STABLE
ok 68 - Function queue__get_id(citext) should not be strict
ok 69 - Function queue__get_id(citext) shouldn't be security definer
ok 70 - Function queue__get_id(citext) shouldn't have any permissions defined
ok 71 - queue__get(queue_id)
ok 72 - queue__get(queue_id)
ok 73 - queue__get(queue_name)
ok 74 - queue__get(queue_name)
ok 75 - queue__get_id(queue_name)
ok 76 - queue__get_id(queue_name)
ok 77 - Function consumer__register(citext, citext) should be VOLATILE
ok 78 - Function consumer__register(citext, citext) should not be strict
ok 79 - Function consumer__register(citext, citext) should be security definer
ok 80 - Check EXECUTE rights on function consumer__register(citext, citext)
ok 81 - Register 1st test consumer
ok 82 - Register 2nd test consumer
ok 83 - registering duplicate consumer should error
ok 84 - registering consumer on non-existent queue should error
ok 85 - registering consumer on SR queue should error
ok 86 - Function consumer__drop(citext, citext) should be VOLATILE
ok 87 - Function consumer__drop(citext, citext) should not be strict
ok 88 - Function consumer__drop(citext, citext) should be security definer
ok 89 - Check EXECUTE rights on function consumer__drop(citext, citext)
ok 90 - Drop test consumer 2
ok 91 - dropping consumer on non-existent queue should error
ok 92 - dropping consumer on SR queue should error
ok 93 - Function "_Publish"(integer, queue_entry) should be VOLATILE
ok 94 - Function "_Publish"(integer, queue_entry) should not be strict
ok 95 - Function "_Publish"(integer, queue_entry) should be security definer
ok 96 - Check EXECUTE rights on function "_Publish"(integer, queue_entry)
ok 97 - Function "Publish"(integer, bytea, jsonb, text) should be VOLATILE
ok 98 - Function "Publish"(integer, bytea, jsonb, text) should not be strict
ok 99 - Function "Publish"(integer, bytea, jsonb, text) shouldn't be security definer
ok 100 - Function "Publish"(integer, bytea, jsonb, text) shouldn't have any permissions defined
ok 101 - Function "Publish"(citext, bytea, jsonb, text) should be VOLATILE
ok 102 - Function "Publish"(citext, bytea, jsonb, text) should not be strict
ok 103 - Function "Publish"(citext, bytea, jsonb, text) shouldn't be security definer
ok 104 - Function "Publish"(citext, bytea, jsonb, text) shouldn't have any permissions defined
ok 105 - Function "Publish"(integer, bytea) should be VOLATILE
ok 106 - Function "Publish"(integer, bytea) should not be strict
ok 107 - Function "Publish"(integer, bytea) shouldn't be security definer
ok 108 - Function "Publish"(integer, bytea) shouldn't have any permissions defined
ok 109 - Function "Publish"(citext, bytea) should be VOLATILE
ok 110 - Function "Publish"(citext, bytea) should not be strict
ok 111 - Function "Publish"(citext, bytea) shouldn't be security definer
ok 112 - Function "Publish"(citext, bytea) shouldn't have any permissions defined
ok 113 - Function "Publish"(integer, jsonb) should be VOLATILE
ok 114 - Function "Publish"(integer, jsonb) should not be strict
ok 115 - Function "Publish"(integer, jsonb) shouldn't be security definer
ok 116 - Function "Publish"(integer, jsonb) shouldn't have any permissions defined
ok 117 - Function "Publish"(citext, jsonb) should be VOLATILE
ok 118 - Function "Publish"(citext, jsonb) should not be strict
ok 119 - Function "Publish"(citext, jsonb) shouldn't be security definer
ok 120 - Function "Publish"(citext, jsonb) shouldn't have any permissions defined
ok 121 - Function "Publish"(integer, text) should be VOLATILE
ok 122 - Function "Publish"(integer, text) should not be strict
ok 123 - Function "Publish"(integer, text) shouldn't be security definer
ok 124 - Function "Publish"(integer, text) shouldn't have any permissions defined
ok 125 - Function "Publish"(citext, text) should be VOLATILE
ok 126 - Function "Publish"(citext, text) should not be strict
ok 127 - Function "Publish"(citext, text) shouldn't be security definer
ok 128 - Function "Publish"(citext, text) shouldn't have any permissions defined
ok 129 - _Publish with non-existent queue_id throws error
ok 130 - Publish with non-existent queue_id throws error
ok 131 - Publishing to "queue that should not exist" throws error
ok 132 - SELECT "Publish"('test SP queue', NULL, NULL, NULL)
ok 133 - SELECT "Publish"('test SP queue', NULL::bytea)
ok 134 - SELECT "Publish"('test SP queue', NULL::jsonb)
ok 135 - SELECT "Publish"('test SP queue', NULL::text)
ok 136 - Register consumer 'post-NULLs'
ok 137 - SELECT "Publish"('test SP queue', '0xdeadbeef', '{"key":"jsonb"}'::jsonb, 'text')
ok 138 - SELECT "Publish"('test SP queue', '0xdeadbeef'::bytea)
ok 139 - SELECT "Publish"('test SP queue', '{"key":"jsonb"}'::jsonb)
ok 140 - SELECT "Publish"('test SP queue', 'text'::text)
ok 141 - Register consumer 'empty'
ok 142 - Function consume(integer, citext, integer) should be VOLATILE
ok 143 - Function consume(integer, citext, integer) should not be strict
ok 144 - Function consume(integer, citext, integer) should be security definer
ok 145 - Check EXECUTE rights on function consume(integer, citext, integer)
ok 146 - Function consume(citext, citext, integer) should be VOLATILE
ok 147 - Function consume(citext, citext, integer) should not be strict
ok 148 - Function consume(citext, citext, integer) shouldn't be security definer
ok 149 - Check EXECUTE rights on function consume(citext, citext, integer)
ok 150 - consume() with non-existent queue_id throws error
ok 151 - consume() with non-existent queue_name throws error
ok 152 - consume() with non-existent consumer throws error
ok 153 - consume() with non-existent consumer throws error
ok 154 - Sanity-check test queue
ok 155 - Sanity-check test queue entries
ok 156 - Verify _sp_consumer contents
ok 157 - Verify NULL entries from test consumer
ok 158 - Verify queue entries are removed
ok 159 - Verify results from consumer 'test consumer'
ok 160 - Verify results from consumer 'post-NULLs'
ok 161 - Verify queue entries are removed
ok 162 - Verify no rows returned for consumer 'test consumer'
ok 163 - Verify no rows returned for consumer 'post-NULLs'
ok 164 - Verify no rows returned for consumer 'empty'
ok 165 - Publish new records
ok 166 - Verify results from consumer 'test consumer'
ok 167 - Verify results from consumer 'post-NULLs'
ok 168 - Verify queue entries still exist
ok 169 - Drop consumer 'empty'
ok 170 - Verify queue entries are removed after dropping consumer
ok 171 - Function _add(integer, queue_entry) should be VOLATILE
ok 172 - Function _add(integer, queue_entry) should not be strict
ok 173 - Function _add(integer, queue_entry) should be security definer
ok 174 - Check EXECUTE rights on function _add(integer, queue_entry)
ok 175 - Function add(integer, bytea, jsonb, text) should be VOLATILE
ok 176 - Function add(integer, bytea, jsonb, text) should not be strict
ok 177 - Function add(integer, bytea, jsonb, text) shouldn't be security definer
ok 178 - Function add(integer, bytea, jsonb, text) shouldn't have any permissions defined
ok 179 - Function add(citext, bytea, jsonb, text) should be VOLATILE
ok 180 - Function add(citext, bytea, jsonb, text) should not be strict
ok 181 - Function add(citext, bytea, jsonb, text) shouldn't be security definer
ok 182 - Function add(citext, bytea, jsonb, text) shouldn't have any permissions defined
ok 183 - Function add(integer, bytea) should be VOLATILE
ok 184 - Function add(integer, bytea) should not be strict
ok 185 - Function add(integer, bytea) shouldn't be security definer
ok 186 - Function add(integer, bytea) shouldn't have any permissions defined
ok 187 - Function add(citext, bytea) should be VOLATILE
ok 188 - Function add(citext, bytea) should not be strict
ok 189 - Function add(citext, bytea) shouldn't be security definer
ok 190 - Function add(citext, bytea) shouldn't have any permissions defined
ok 191 - Function add(integer, jsonb) should be VOLATILE
ok 192 - Function add(integer, jsonb) should not be strict
ok 193 - Function add(integer, jsonb) shouldn't be security definer
ok 194 - Function add(integer, jsonb) shouldn't have any permissions defined
ok 195 - Function add(citext, jsonb) should be VOLATILE
ok 196 - Function add(citext, jsonb) should not be strict
ok 197 - Function add(citext, jsonb) shouldn't be security definer
ok 198 - Function add(citext, jsonb) shouldn't have any permissions defined
ok 199 - Function add(integer, text) should be VOLATILE
ok 200 - Function add(integer, text) should not be strict
ok 201 - Function add(integer, text) shouldn't be security definer
ok 202 - Function add(integer, text) shouldn't have any permissions defined
ok 203 - Function add(citext, text) should be VOLATILE
ok 204 - Function add(citext, text) should not be strict
ok 205 - Function add(citext, text) shouldn't be security definer
ok 206 - Function add(citext, text) shouldn't have any permissions defined
ok 207 - _add with non-existent queue_id throws error
ok 208 - add with non-existent queue_id throws error
ok 209 - adding to "queue that should not exist" throws error
ok 210 - SELECT "add"('test SR queue', NULL, NULL, NULL)
ok 211 - SELECT "add"('test SR queue', NULL::bytea)
ok 212 - SELECT "add"('test SR queue', NULL::jsonb)
ok 213 - SELECT "add"('test SR queue', NULL::text)
ok 214 - SELECT "add"('test SR queue', '0xdeadbeef', '{"key":"jsonb"}'::jsonb, 'text')
ok 215 - SELECT "add"('test SR queue', '0xdeadbeef'::bytea)
ok 216 - SELECT "add"('test SR queue', '{"key":"jsonb"}'::jsonb)
ok 217 - SELECT "add"('test SR queue', 'text'::text)
ok 218 - Function queue__drop(integer, boolean) should be VOLATILE
ok 219 - Function queue__drop(integer, boolean) should not be strict
ok 220 - Function queue__drop(integer, boolean) should be security definer
ok 221 - Check EXECUTE rights on function queue__drop(integer, boolean)
ok 222 - Function queue__drop(citext, boolean) should be VOLATILE
ok 223 - Function queue__drop(citext, boolean) should not be strict
ok 224 - Function queue__drop(citext, boolean) shouldn't be security definer
ok 225 - Function queue__drop(citext, boolean) shouldn't have any permissions defined
ok 226 - Dropping non-existent queue throws an error
ok 227 - Dropping non-existent queue throws an error
# TRANSACTION INTENTIONALLY LEFT OPEN!
